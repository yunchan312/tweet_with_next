// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  email      String?    @unique
  password   String?
  phone      String?    @unique
  github_id  String?    @unique
  avatar     String?
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  SMSToken   SMSToken[]
  Comment    Comment[]
  Like       Like[]
}

model SMSToken {
  id         Int       @id @default(autoincrement())
  title      String
  content    String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  Comment    Comment[]
  Like       Like[]
}

model Comment {
  id      Int    @id @default(autoincrement())
  payload String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       SMSToken @relation(fields: [sMSTokenId], references: [id], onDelete: Cascade)
  userId     Int
  sMSTokenId Int
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post SMSToken @relation(fields: [sMSTokenId], references: [id], onDelete: Cascade)

  userId     Int
  sMSTokenId Int

  @@id(name: "id", [userId, sMSTokenId])
}
